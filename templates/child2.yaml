AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  NotificationsTopicArn:
    Type: String
    Description: The ARN of notifications SNS topic
  DataSourceRole:
    Type: String
    Description: The IAM Role for Lambda execution
  SharedLayerArn:
    Type: String
    Description: The ARN of the shared layer
  FfmpegLayerArn:
    Type: String
    Description: The ARN of the ffmpeg layer
  MergedApiArn:
    Type: String
    Description: The ID of the merged GraphQL API

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    Handler: app.lambda_handler

Resources:
  SourceApi2ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      Description: "API Key for the Demo API"

  SourceApi2Schema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      DefinitionS3Location: ./sourceApi2.graphql

  Endpoint2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../endpoint2/
      Layers:
        - !Ref FfmpegLayerArn
        - !Ref SharedLayerArn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: "*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: "*"
      Environment:
        Variables:
          SNS_NOTIFICATION_TOPIC_ARN: !Ref NotificationsTopicArn

  Endpoint2DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      Name: Endpoint2DataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt Endpoint2Function.Arn
      ServiceRoleArn: !Ref DataSourceRole

  # TODO: if works without this, remove from other functions
  # Lambda2InvokePermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: "lambda:invokeFunction"
  #     FunctionName: !GetAtt Endpoint2Function.Arn
  #     Principal: "appsync.amazonaws.com"

  Endpoint2Resolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      TypeName: "Mutation"
      FieldName: "endpoint2"
      DataSourceName: !GetAtt Endpoint2DataSource.Name
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const {source, args} = ctx;
          if (!args.data) {
            util.error(`Missing required field data`, 'BadRequestException');
          }
          return {
            operation: 'Invoke',
            payload: { ...args },
          };
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            util.appendError(error.message, error.type, result);
          }
          return result;
        }
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0

  Lambda3InvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt Endpoint3Function.Arn
      Principal: "appsync.amazonaws.com"

  Endpoint3DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      Name: Endpoint3DataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt Endpoint3Function.Arn
      ServiceRoleArn: !Ref DataSourceRole

  Endpoint3Resolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      TypeName: "Mutation"
      FieldName: "endpoint3"
      DataSourceName: !GetAtt Endpoint3DataSource.Name
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const {source, args} = ctx;
          if (!args.data) {
            util.error(`Missing required field data`, 'BadRequestException');
          }
          return {
            operation: 'Invoke',
            payload: { ...args },
          };
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            util.appendError(error.message, error.type, result);
          }
          return result;
        }
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0

  Endpoint3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../endpoint3/
      Layers:
        - !Ref SharedLayerArn

  Endpoint4Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../endpoint4/

  Lambda4InvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt Endpoint4Function.Arn
      Principal: "appsync.amazonaws.com"

  Endpoint4FunctionDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      Name: Endpoint4FunctionDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt Endpoint4Function.Arn
      ServiceRoleArn: !Ref DataSourceRole

  Endpoint4FunctionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt SourceApi2.ApiId
      TypeName: "Mutation"
      FieldName: "endpoint4"
      DataSourceName: !GetAtt Endpoint4FunctionDataSource.Name
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const {source, args} = ctx;
          return {
            operation: 'Invoke',
            payload: { ...args },
          };
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            util.appendError(error.message, error.type, result);
          }
          return result;
        }
      Runtime:
        Name: APPSYNC_JS
        RuntimeVersion: 1.0.0

  SourceApi2:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: demo-source-api-2
      ApiType: GRAPHQL
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            UserPoolId: us-east-1_fsGHzHDM7
            AwsRegion: us-east-1

  SourceApi2Association:
    Type: AWS::AppSync::SourceApiAssociation
    DependsOn:
      - SourceApi2Schema
    Properties:
      MergedApiIdentifier: !Ref MergedApiArn
      SourceApiIdentifier: !GetAtt SourceApi2.Arn
      SourceApiAssociationConfig:
        MergeType: "AUTO_MERGE"

Outputs:
  SourceApi2Arn:
    Value: !GetAtt SourceApi2.Arn
    Export:
      Name: "SourceApi2ArnExported"
